use aoc::year2024::day08::*;

// ..........
// ...#......
// ..........
// ....a.....
// ..........
// .....a....
// ..........
// ......#...
// ..........
// ..........
const EXAMPLE_1_PART1: &str = "\
..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
..........";

// ..........
// ...#......
// #.........
// ....a.....
// ........a.
// .....a....
// ..#.......
// ......#...
// ..........
// ..........
const EXAMPLE_2_PART1: &str = "\
..........
..........
..........
....a.....
........a.
.....a....
..........
..........
..........
..........";

// T....#....
// ...T......
// .T....#...
// .........#
// ..#.......
// ..........
// ...#......
// ..........
// ....#.....
// ..........
const EXAMPLE_1_PART2: &str = "\
T.........
...T......
.T........
..........
..........
..........
..........
..........
..........
..........";

// ......#....#
// ...#....0...
// ....#0....#.
// ..#....0....
// ....0....#..
// .#....A.....
// ...#........
// #......#....
// ........A...
// .........A..
// ..........#.
// ..........#.
const EXAMPLE_INPUT: &str = "\
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............";

#[test]
fn test_part1_example_1() {
    let input = parse(EXAMPLE_1_PART1);
    assert_eq!(part1(&input), 2);
}

#[test]
fn test_part1_example_2() {
    let input = parse(EXAMPLE_2_PART1);
    assert_eq!(part1(&input), 4);
}

#[test]
fn test_part1() {
    let input = parse(EXAMPLE_INPUT);
    assert_eq!(part1(&input), 14);
}

#[test]
fn test_part2_example_1() {
    let input = parse(EXAMPLE_1_PART2);
    assert_eq!(part2(&input), 9);
}

#[test]
fn test_part2() {
    let input = parse(EXAMPLE_INPUT);
    assert_eq!(part2(&input), 34);
}
